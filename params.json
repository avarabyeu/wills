{"name":"Wills","tagline":"Useful utils built on top of Guava's ListenableFuture ","body":"# wills [![Build Status](https://travis-ci.org/avarabyeu/wills.svg?branch=master)](https://travis-ci.org/avarabyeu/wills) [![Maven central](https://maven-badges.herokuapp.com/maven-central/com.github.avarabyeu/wills/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.github.avarabyeu/wills)\r\n\r\nUseful utils built on top of Guava's ListenableFuture\r\n\r\n\r\n* [Maven Dependencies](#maven-dependencies)\r\n* [The problem 'wills' solve](#the-problem-wills-solve)\r\n* [Creation](#creation)\r\n    * [from JKSs Future](#from-jdks-future)\r\n    * [from Guava's Future](#from-guavas-listenablefuture)\r\n    * [Decorating ExecutorService](#decorating-executorservice)\r\n* [Callbacks](#callbacks)\r\n    * [whenSuccessful](#whensuccessful)\r\n    * [whenFailed](#whenfailed)\r\n    * [whenDone](#whendone)\r\n* [Fallback (Replacing Future in case of failure)](#fallback-replacing-future-in-case-of-failure) \r\n\r\n## Maven Dependencies\r\nLast stable version:\r\n```xml\r\n<dependency>\r\n    <groupId>com.github.avarabyeu</groupId>\r\n    <artifactId>wills</artifactId>\r\n    <version>0.0.1</version>\r\n</dependency>\r\n```\r\n\r\n## The problem 'wills' solve\r\nGoogle did perfect job releasing Guava - set of very useful utilities for collections, I/O, concurrency and others java APIs.\r\nGuava's concurrency utilities helps to solve widely used cases such as adding callbacks, transforming/filtering futures. \r\nBut, sometimes it looks a bit ridiculous. Just take a look:\r\n\r\n```java\r\nListeningExecutorService executorService = MoreExecutors\r\n            .listeningDecorator(Executors.newFixedThreadPool(1));\r\nListenableFuture<String> future = executorService\r\n            .submit(new SomeCallable<String>());\r\nFutures.addCallback(future, new FutureCallback<String>() {\r\n    @Override\r\n    public void onSuccess(@Nullable String result) {\r\n        System.out.println(\"I'm successful!\");\r\n    }\r\n    @Override\r\n    public void onFailure(Throwable t) {\r\n            System.out.println(\"I'm not!\");\r\n    }\r\n});\r\n\r\n```\r\n\r\nToo much lines of code, right? Adding callbacks via Futures make sense if you want to add several ones. But what if you need to add just one?\r\nThis is what 'wills' do for you:\r\n\r\n```java\r\nWillExecutorService executorService = WillExecutors\r\n            .willDecorator(Executors.newFixedThreadPool(1));\r\nWill<String> future = executorService\r\n            .submit(new SomeCallable<String>())\r\n.whenSuccessful(new Action<String>() {\r\n    @Override\r\n    public void apply(String s) {\r\n        System.out.println(\"I'm OK!\");\r\n    }\r\n}).whenFailed(new Action<Throwable>() {\r\n    @Override\r\n    public void apply(Throwable throwable) {\r\n        System.out.println(\"I'm not!\");\r\n    }\r\n});\r\n```\r\nor even more simple in JDK8 style:\r\n\r\n```java\r\n\r\nexecutorService.submit(new SomeCallable<String>())\r\n     .whenSuccessful(result -> System.out.println(\"I'm OK!\"))\r\n     .whenFailed(throwable -> System.out.println(\"I'm not!\"));\r\n\r\n```\r\n\r\nAnother words, **using 'wills' you are able to build chained method calls** which makes code cleaner and faster to implement.\r\nActually, com.github.avarabyeu.wills.Will interface extends Guava's ListanableFuture with some useful convenience methods.\r\nGo through documentation to find out explanation about them.\r\n\r\n## Creation\r\n\r\n### from JDKs Future\r\n\r\n```java\r\nFuture<String> future = ...;\r\nWill<String> will = Wills.forFuture(future);\r\n```\r\n\r\n### from Guava's ListenableFuture\r\n\r\n```java\r\nListenableFuture<String> future = ...;\r\nWill<String> will = Wills.forListenableFuture(future);\r\n```\r\n\r\n### Decorating ExecutorService\r\n\r\nThis is most simple way to work with 'wills':\r\n \r\n```java\r\nWillExecutorService executorService = WillExecutors.willDecorator(Executors.newFixedThreadPool(10));\r\nWill<String> will = executorService.submit(new Callable<String>() {\r\n    @Override\r\n    public String call() throws Exception {\r\n        return \"Hello world!\";\r\n    }\r\n});\r\n```\r\n\r\n## Callbacks\r\n\r\n### whenSuccessful\r\nExecutes some action once Future is done.\r\n\r\nExample:\r\n```java\r\nWill<String> will = Wills.of(\"SOME RESULT\")\r\n    .whenSuccessful(new Action<String>() {\r\n        @Override\r\n        public void apply(String o) {\r\n            doSomething():\r\n        }\r\n});\r\n\r\n```\r\nExample (JDK8):\r\n```java\r\nWills.of(\"SOME RESULT\").whenSuccessful(result -> doSomething());\r\n\r\n```\r\n\r\n\r\nGuava's analogue:\r\n\r\n```java\r\nListenableFuture<?> future = Futures.immediateFuture(\"SOME RESULT\");\r\nFutures.addCallback(future, new FutureCallback<Object>() {\r\n    @Override\r\n    public void onSuccess(@Nullable Object result) {\r\n        doSomething();\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Throwable t) {\r\n        //do nothing\r\n    }\r\n});\r\n```\r\n\r\n### whenFailed\r\nExecutes some action in case Future is failed\r\n\r\nExample:\r\n```java\r\nWill<String> will = Wills.of(\"SOME RESULT\")\r\n    .whenFailed(new Action<String>() {\r\n        @Override\r\n        public void apply(String o) {\r\n            doSomething():\r\n        }\r\n});\r\n\r\n```\r\nExample (JDK8):\r\n```java\r\nWills.of(\"SOME RESULT\").whenFailed(result -> doSomething());\r\n\r\n```\r\n\r\n\r\nGuava's analogue:\r\n\r\n```java\r\nListenableFuture<?> future = Futures.immediateFuture(\"SOME RESULT\");\r\nFutures.addCallback(future, new FutureCallback<Object>() {\r\n    @Override\r\n    public void onSuccess(@Nullable Object result) {\r\n        //do nothing\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Throwable t) {\r\n        doSomething();\r\n    }\r\n});\r\n```\r\n\r\n### whenDone\r\nExecutes some action once Future is completed. Doesn't matter successful or not.\r\nHere action is boolean-type, because there will be passed execution result (TRUE in case if future execution is successful)\r\n\r\nExample:\r\n```java\r\nWill<String> will = Wills.of(\"SOME RESULT\")\r\n    .whenDone(new Action<Boolean>() {\r\n        @Override\r\n        public void apply(Boolean successful) {\r\n            doSomething():\r\n        }\r\n});\r\n\r\n```\r\nExample (JDK8):\r\n```java\r\nWills.of(\"SOME RESULT\").whenDone(successful -> doSomething());\r\n\r\n```\r\n\r\n\r\nGuava's analogue: There is no direct analogue. You can only can add the following callback:\r\n\r\n```java\r\nnew FutureCallback<A>() {\r\n    @Override\r\n    public void onSuccess(@Nullable A result) {\r\n        action.apply(true);\r\n    }\r\n\r\n    @Override\r\n    public void onFailure(Throwable t) {\r\n        action.apply(false);\r\n    }\r\n});\r\n```\r\n\r\n## Fallback (Replacing Future in case of failure)\r\nSometimes you need something like default value for you Future. Guava's fallbacks mechanism \r\nis a good solution for such cases:\r\n\r\n```java\r\nListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(10));\r\nListenableFuture<String> future = executorService.submit(new Callable<String>() {\r\n    @Override\r\n    public String call() throws Exception {\r\n        return \"Hello world!\";\r\n    }\r\n});\r\nfuture = Futures.withFallback(future, new FutureFallback<String>() {\r\n    @Override\r\n    public ListenableFuture<String> create(Throwable t) throws Exception {\r\n        return Futures.immediateFuture(\"NO RESULTS!\");\r\n    }\r\n});\r\n```\r\n\r\nHere is more simple version in Will style:\r\n\r\n```java\r\nWillExecutorService executorService = WillExecutors.willDecorator(Executors.newFixedThreadPool(10));\r\nWill<String> will = executorService.submit(new Callable<String>() {\r\n    @Override\r\n    public String call() throws Exception {\r\n        return \"Hello world!\";\r\n    }\r\n}).replaceFailed(Wills.of(\"NO RESULTS!\"));        \r\n```\r\nif you wanna get access to future's exception, you still may use Guava's FutureFallback:\r\n\r\n```java\r\n\r\nwill = will.replaceFailed(new FutureFallback<String>() {\r\n     @Override\r\n     public ListenableFuture<String> create(Throwable t) throws Exception {\r\n         return Wills.of(\"NO RESULTS!\");\r\n     }\r\n });\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}